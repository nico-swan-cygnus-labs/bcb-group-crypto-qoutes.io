{"version":3,"sources":["./src/app/core/store/reducers/quotes.reducer.ts","ws (ignored)","./src/environments/environment.ts","./src/app/core/data/data-stream.service.ts","./src/app/ui/ui-material.module.ts","./src/app/ui/layout/layout.component.ts","./src/app/ui/layout/layout.component.html","./src/app/core/store/index.ts","./src/app/core/store/actions/quotes.actions.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/core/data/data.service.ts","./src/app/core/store/effects/quotes.effects.ts","./src/app/ui/ui.module.ts","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Quote } from 'app/core/interfaces/quote.interface';\r\nimport { SymbolHistory } from 'app/core/interfaces/symbol-history.interface';\r\nimport { TradingSignal } from 'app/core/interfaces/trading-signal.interface';\r\nimport * as QuotesActions from '../actions/quotes.actions';\r\n\r\n\r\n// The state\r\nexport interface State {\r\n    socketConnected?: boolean;\r\n    cryptoQuotes: Map<string, Map<string, Quote>>;\r\n    dailyHistory: Map<string, SymbolHistory>;\r\n    tradingSignals: Map<string, TradingSignal>;\r\n}\r\n\r\n// The initial state when application loads\r\nexport const INIT_STATE: State = {\r\n    socketConnected: false,\r\n    cryptoQuotes: new Map(),\r\n    dailyHistory: new Map(),\r\n    tradingSignals: new Map()\r\n};\r\n\r\nexport function reducer(state = INIT_STATE, action: QuotesActions.Actions): State {\r\n    switch (action.type) {\r\n        case QuotesActions.SET_SOCKET_CONNECTED: {\r\n            return handleSetSocketConnect(state, action);\r\n        }\r\n        case QuotesActions.SET_QUOTES: {\r\n            return handleSetQuotes(state, action);\r\n        }\r\n        case QuotesActions.UPDATE_QUOTES_API: {\r\n            return handleUpdateQuotesFromAPI(state, action);\r\n        }\r\n\r\n        case QuotesActions.UPDATE_HISTORY_API: {\r\n            return handleUpdateHistoryFromAPI(state, action);\r\n        }\r\n        case QuotesActions.UPDATE_TRADING_SIGNAL_API: {\r\n            return handleUpdateTradingSignalsFromAPI(state, action);\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction handleUpdateHistoryFromAPI(state: State, action: any  ): State {\r\n    let result: Map<string, SymbolHistory> = new Map();\r\n    const history: SymbolHistory =  {\r\n           symbol: action.payload.symbol,\r\n           currency: action.payload.currency,\r\n           length: action.payload.length,\r\n           data: action.payload.data\r\n    }\r\n    result.set(action.payload.symbol, history);\r\n    return {\r\n        ...state,\r\n        dailyHistory: result\r\n    };\r\n}\r\n\r\nfunction handleUpdateTradingSignalsFromAPI(state: State, action: any  ): State {\r\n    let result: Map<string, TradingSignal> = new Map();\r\n    const signals : TradingSignal = {\r\n        symbol: action.payload.symbol,\r\n        time: action.payload.time,\r\n        signals: action.payload.signals\r\n    }\r\n    result.set(signals.symbol, signals);\r\n    \r\n    return {\r\n        ...state,\r\n        tradingSignals: result\r\n    };\r\n}\r\n\r\nfunction handleUpdateQuotesFromAPI(state: State, action: QuotesActions.UpdateQuotesFromAPI): State {\r\n    let result: Map<string, Map<string, Quote>> = new Map();\r\n\r\n    Object.keys(action.payload).forEach(symbol => {\r\n        let currenciesMap: Map<string, Quote> = new Map();\r\n        const currencies: Map<string, string> = action.payload[symbol];\r\n        Object.keys(currencies).forEach(currency => {\r\n           const amount = currencies[currency];\r\n           const quote: Quote = {\r\n                    symbol: symbol,\r\n                    currency: currency,\r\n                    price: parseInt(amount),\r\n                    notes: 'API_RETRIEVED'\r\n                }\r\n                currenciesMap.set(currency,quote);\r\n            });\r\n        result.set(symbol,currenciesMap)\r\n    });\r\n    \r\n\r\n    return {\r\n        ...state,\r\n        cryptoQuotes: result\r\n    };\r\n}\r\nfunction handleSetSocketConnect(state: State, action: QuotesActions.SetSocketConnected): State {\r\n    return {\r\n        ...state,\r\n        socketConnected: action.payload\r\n    };\r\n}\r\n\r\nfunction handleSetQuotes(state: State, action: QuotesActions.SetQuotes): State {\r\n    return {\r\n        ...state,\r\n        cryptoQuotes: action.payload\r\n    };\r\n}\r\n\r\nexport const getSocketStatus = (state: State): boolean => state.socketConnected;\r\nexport const getQuotes = (state: State): Map<string, Map<string, Quote>> => state.cryptoQuotes;\r\n\r\nexport const getTradingSignals  = (state: State): Object => state.tradingSignals;\r\nexport const getDailyHistoryQuote  = (state: State): Object => state.dailyHistory;","/* (ignored) */","export const environment = {\n    production: false,\n    api: {\n        url: 'http://localhost:3000'\n    },\n    socket: {\n        url: 'http://localhost:3001',\n        config: {}\n    }\n};","import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport * as io from 'socket.io-client';\r\nimport { environment } from '../../../environments/environment';\r\nimport * as fromRoot from '../../core/store';\r\nimport { Quote } from '../interfaces/quote.interface';\r\n\r\n@Injectable()\r\nexport class DataStreamService {\r\n    private socket: SocketIOClient.Socket;\r\n    cryptoQuotes$ = new BehaviorSubject<Map<string, Map<string, Quote>>>(new Map());\r\n    connected$ = new BehaviorSubject<boolean>(false);\r\n\r\n    /**\r\n     * This class manages the connection to the quotes server socket and populate the\r\n     * application state with the latest values\r\n     */\r\n    constructor(private store: Store<fromRoot.State>) {\r\n        // Connect to the server socket\r\n        this.socket = io.connect(environment.socket.url, environment.socket.config);\r\n        // Manage client connections\r\n        this.socket.on('connect', () => this.onSocketConnected());\r\n        // Manage client disconnections\r\n        this.socket.on('disconnect', (reason: string) => this.onSocketDisconnect(reason));\r\n        // Manage quotes received from server\r\n        this.socket.on('quote', (quote: Quote) => {\r\n            this.onUpdateQuote(quote);\r\n        });\r\n        // Handel errors\r\n        this.socket.on('error', (error: Error) => console.error(error));\r\n    }\r\n\r\n    /**\r\n     * Handel when the client is connected to the server socket\r\n     * @returns {none}\r\n     */\r\n    private onSocketConnected(): void {\r\n        console.debug('Connected to stream');\r\n        return this.connected$.next(true);\r\n    }\r\n\r\n    /**\r\n     * Handel when the client is disconnected from the server socket\r\n     * @param { string } reason The reason given for the disconnection\r\n     */\r\n    private onSocketDisconnect(_reason: string): void {\r\n        console.debug(`Disconnected from stream: ${_reason}`);\r\n        if (_reason === 'io server disconnect') {\r\n            // The disconnection was initiated by the server,\r\n            // you need to reconnect manually\r\n            this.socket.connect();\r\n        }\r\n        // else the socket will automatically try to reconnect\r\n        return this.connected$.next(false);\r\n    }\r\n\r\n    /**\r\n     * Initiate disconnection from the socket\r\n     */\r\n    disconnectStream() {\r\n        this.socket.disconnect();\r\n        this.connected$.next(false);\r\n    }\r\n\r\n    /**\r\n     * Update the quote state with latest price\r\n     * Usually this is from the socket connections\r\n     * @param { Quote } _quote the quote value from the socket\r\n     */\r\n    private onUpdateQuote(_quote: Quote): void {\r\n        // Get all quotes\r\n        let state: fromRoot.State;\r\n        this.store.subscribe(s => state = s)\r\n        const quotes: Map<string, Map<string, Quote>> = state.ui.cryptoQuotes;\r\n        this.cryptoQuotes$ = new BehaviorSubject(quotes);\r\n        \r\n        const newPrice = _quote.price;\r\n        let amounts: Map<string, Quote>;\r\n\r\n        let newQuote: Quote = {\r\n                    symbol: _quote.symbol,\r\n                    currency: _quote.currency,\r\n                    price: newPrice,\r\n                    direction: 'UNCHANGED',\r\n                    notes: _quote.notes || undefined\r\n                }\r\n\r\n        var getDirection = function (_oldPrice, _newPrice) {\r\n            let direction: string = _newPrice > _oldPrice ? 'UP' : 'DOWN';\r\n            if (_newPrice == _oldPrice) {\r\n                direction = 'UNCHANGED';\r\n            }\r\n            return direction;\r\n        }\r\n\r\n        // If quote in stream state\r\n        if (quotes.has(_quote.symbol)  ) {\r\n            console.debug(`Quote found in stream state. ${_quote.symbol}`);\r\n            amounts = quotes.get(_quote.symbol);\r\n\r\n            if (amounts.get(_quote.currency)) {\r\n                const savedQuote: Quote = amounts.get(_quote.currency);\r\n                const direction = getDirection(savedQuote.price, newPrice);\r\n                newQuote.direction = direction\r\n\r\n            }\r\n            amounts.set(_quote.currency, newQuote);\r\n\r\n        } else {\r\n            console.debug(`Quote not found in stream state adding ${_quote.symbol}.`);\r\n            amounts = new Map().set(_quote.currency, newQuote);\r\n        }\r\n        quotes.set(_quote.symbol, amounts);\r\n        console.debug(quotes);\r\n\r\n        return this.cryptoQuotes$.next(quotes);\r\n    }\r\n}\r\n","import { LayoutModule } from '@angular/cdk/layout';\nimport { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatToolbarModule } from '@angular/material/toolbar';\n\n\n\nconst MODULES = [\n    LayoutModule,\n    MatButtonModule,\n    MatCardModule,\n    MatGridListModule,\n    MatIconModule,\n    MatListModule,\n    MatMenuModule,\n    MatSidenavModule,\n    MatToolbarModule,\n    MatExpansionModule,\n    MatChipsModule\n];\n\n@NgModule({\n    imports: [...MODULES],\n    exports: [...MODULES]\n})\nexport class UiMaterialModule {}\n","import { BreakpointObserver } from '@angular/cdk/layout';\nimport { Component } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { DataStreamService } from '../../core/data/data-stream.service';\nimport * as fromRoot from '../../core/store';\nimport * as QuotesActions from '../../core/store/actions/quotes.actions';\n\n@Component({\n    selector: 'app-layout',\n    templateUrl: './layout.component.html',\n    styleUrls: ['./layout.component.scss']\n})\nexport class LayoutComponent {\n    socketStatus$: Observable<string>;\n\n    constructor(\n        private breakpointObserver: BreakpointObserver,\n        private store: Store<fromRoot.State>,\n        private dataStreamService: DataStreamService\n    ) {}\n\n    // eslint-disable-next-line @angular-eslint/use-lifecycle-interface\n    ngOnInit() {\n        this.socketStatus$ = this.store\n            .select(fromRoot.getSocketStatus)\n            .pipe(map((connected: boolean) => (connected ? 'connected' : 'disconnected')));\n\n        this.dataStreamService.connected$\n            .pipe(map((connected) => new QuotesActions.SetSocketConnected(connected)))\n            .subscribe(this.store);\n    }\n}\n","<mat-sidenav-container class=\"sidenav-container\">\r\n  <mat-sidenav-content>\r\n    <mat-toolbar color=\"accent-0\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n      <img src=\" assets/logo.png\" height=\"40\" class=\"d-inline-block align-top\" alt=\"BCB Group Logo\" loading=\"lazy\" />\r\n      <span style=\"flex: 1 1 auto;\"></span>\r\n      <span>\r\n        <h1>\r\n          Crypto Quotes\r\n        </h1>\r\n      </span>\r\n      <span style=\"flex: 1 1 auto;\"></span>\r\n      <span [ngClass]=\"socketStatus$ | async\"></span>\r\n    </mat-toolbar>\r\n    <router-outlet>\r\n    </router-outlet>\r\n  </mat-sidenav-content>\r\n</mat-sidenav-container>","import { ActionReducerMap, createFeatureSelector, createSelector } from '@ngrx/store';\nimport * as fromQuotes from './reducers/quotes.reducer';\n\n/**\n * The over all state for the UI\n * In this application it is storing crypto quotes data\n */\nexport interface State {\n    ui: fromQuotes.State;\n}\n\n/**\n * The manipulator for the UI State\n */\nexport const reducers: ActionReducerMap<State> = {\n    ui: fromQuotes.reducer\n};\n\n/**\n *  Get the complete state\n * */\nexport const getUIState = createFeatureSelector<fromQuotes.State>('ui');\n\n/**\n * Get only the socket connection state\n */\nexport const getSocketStatus = createSelector(getUIState, fromQuotes.getSocketStatus);\n\n/**\n * Get only quotes data\n */\nexport const getQuotes = createSelector(getUIState, fromQuotes.getQuotes);\n\n/**\n * Get history for a coin\n */\nexport const getDailyHistoryQuote = createSelector(getUIState, fromQuotes.getDailyHistoryQuote);\n\n/**\n * Get trading signals for a coin\n */\nexport const getTradingSignals = createSelector(getUIState, fromQuotes.getTradingSignals);\n","\r\nimport { Action, createAction, props } from '@ngrx/store';\r\nimport { Quote } from 'app/core/interfaces/quote.interface';\r\nimport { SymbolHistory } from 'app/core/interfaces/symbol-history.interface';\r\n\r\nexport const SET_QUOTES = '[Quotes] Set quotes';\r\nexport const UPDATE_QUOTES = '[Quotes] Update quotes';\r\nexport const SET_SOCKET_CONNECTED = '[Quotes] Set socket connected';\r\nexport const UPDATE_QUOTES_API = '[Quotes API] Update crypto quotes from API response';\r\nexport const UPDATE_HISTORY_API = '[Quotes API] Update crypto history from API response';\r\nexport const UPDATE_TRADING_SIGNAL_API = '[Quotes API] Update crypto trading signal from API response';\r\n\r\nexport const GET_QUOTES_API = '[Quotes API] Get crypto quotes';\r\nexport const GET_QUOTES_API_SUCCESS = '[Quotes API] Get crypto quotes successful';\r\nexport const GET_API_FAIL = '[Quotes API] Call failed failed';\r\n\r\nexport const GET_DAILY_HISTORY_API = '[Quotes API] Get daily history for symbol';\r\nexport const GET_TRADING_SIGNALS_API= '[Quotes API] Get trading signals for symbol';\r\n\r\n\r\n/**\r\n * Update the quotes with the latest prices\r\n */\r\nexport class UpdateQuotesFromAPI implements Action {\r\n    readonly type = UPDATE_QUOTES_API;\r\n    quotes: Map<string, Map<string, string>>;\r\n    constructor(public payload?: Map<string, Map<string, string>>) {}\r\n}\r\n\r\n/**\r\n * Update the history with the latest prices\r\n */\r\nexport class UpdateHistoryFromAPI implements Action {\r\n    readonly type = UPDATE_HISTORY_API;\r\n    constructor(public payload?: SymbolHistory) {}\r\n}\r\n\r\n/**\r\n * Update the trading signals with the latest prices\r\n */\r\nexport class UpdateTradingSignalsFromAPI implements Action {\r\n    readonly type = UPDATE_TRADING_SIGNAL_API;\r\n    constructor(public payload?: any) {}\r\n}\r\n\r\n/**\r\n * Set the Status of the websocket connection state\r\n */\r\nexport class SetSocketConnected implements Action {\r\n    readonly type = SET_SOCKET_CONNECTED;\r\n    constructor(public payload?: boolean) {}\r\n}\r\n\r\n/**\r\n * Set the quotes state with the latest prices\r\n */\r\nexport class SetQuotes implements Action {\r\n    readonly type = SET_QUOTES;\r\n    constructor(public payload?: Map<string, Map<string, Quote>>) {}\r\n}\r\n\r\n/**\r\n * Update the quotes with the latest prices\r\n */\r\nexport class UpdateQuote implements Action {\r\n    readonly type = UPDATE_QUOTES;\r\n    constructor(public payload?: Quote) {}\r\n}\r\n\r\n/**\r\n * Get history for symbol currency pair\r\n */\r\nexport class GetDailyHistory implements Action {\r\n    readonly type = GET_DAILY_HISTORY_API;\r\n    constructor(public symbol: string, public currency: string, public length: number ) {}\r\n}\r\n\r\n/**\r\n * Get history for symbol currency pair\r\n */\r\nexport class GetTradingSignals implements Action {\r\n    readonly type = GET_TRADING_SIGNALS_API;\r\n    constructor(public symbol: string ) {}\r\n}\r\n\r\n\r\nexport const getDailyHistory = createAction(\r\n  GET_DAILY_HISTORY_API,\r\n  props<{ symbol: string, currency: string, length: number }>()\r\n);\r\n\r\nexport const getTradingSignals = createAction(\r\n  GET_TRADING_SIGNALS_API,\r\n  props<{ symbol: string }>()\r\n);\r\n\r\n\r\nexport type Actions = \r\n    SetSocketConnected | \r\n    SetQuotes | \r\n    UpdateQuote | \r\n    UpdateQuotesFromAPI | \r\n    UpdateTradingSignalsFromAPI |\r\n    UpdateHistoryFromAPI\r\n","import { Component } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport * as fromRoot from './core/store';\r\nimport * as QuotesActions from './core/store/actions/quotes.actions';\r\nimport { } from './core/store/effects/quotes.effects';\r\n\r\n@Component({\r\n    selector: 'app-root',\r\n    templateUrl: './app.component.html',\r\n    styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n   \r\n    constructor(private store: Store<fromRoot.State>) {}\r\n\r\n    // eslint-disable-next-line @angular-eslint/use-lifecycle-interface\r\n    ngOnInit(): void {\r\n        // Request to get all default quotes update with Application started\r\n        this.store.dispatch({ type: QuotesActions.GET_QUOTES_API });\r\n    }\r\n}\r\n","<router-outlet></router-outlet>","import { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\r\nimport { NgxChartsModule } from '@swimlane/ngx-charts';\r\nimport { environment } from '../environments/environment';\r\n//import { ChartsModule } from 'ng2-charts';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { DataStreamService } from './core/data/data-stream.service';\r\nimport { DataService } from './core/data/data.service';\r\nimport * as fromRoot from './core/store';\r\nimport { QuotesEffects } from './core/store/effects/quotes.effects';\r\nimport { UiModule } from './ui/ui.module';\nimport { ScullyLibModule } from '@scullyio/ng-lib';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    UiModule,\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    FontAwesomeModule,\r\n    AppRoutingModule,\r\n    FlexLayoutModule,\r\n    HttpClientModule,\r\n    NgxChartsModule,\r\n    EffectsModule.forRoot([QuotesEffects]),\r\n    StoreModule.forRoot(fromRoot.reducers),\r\n    StoreDevtoolsModule.instrument({ maxAge: 25, logOnly: environment.production }),\r\n    ScullyLibModule,\r\n  ],\r\n  providers: [DataService, DataStreamService],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }","import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { environment } from '../../../environments/environment';\r\n\r\n@Injectable()\r\nexport class DataService {\r\n    private apiBase: string;\r\n    private corsHeaders: HttpHeaders;\r\n\r\n    constructor(private http: HttpClient) {\r\n        this.apiBase = environment.api.url;\r\n        this.corsHeaders = new HttpHeaders({\r\n            'Content-Type': 'application/json',\r\n            Accept: 'application/json',\r\n            'Access-Control-Allow-Origin': '*'\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get all the default quotes from te\r\n     * @returns { Observable<Map<string, Map<string, string>>> } The data from the API request\r\n     */\r\n    getAllQuotes(): Observable<Map<string, Map<string, string>>> {\r\n        return this.http.get(`${this.apiBase}/api/quotes`, { headers: this.corsHeaders })\r\n        .pipe(map((response: Map<string, Map<string, string>>)  => response))\r\n\r\n    }\r\n\r\n    /**\r\n     * Get a latest quote for a symbol currency pair\r\n     * @param { string } _symbol The crypto symbol for the coin\r\n     * @param { string } _currency The currency symbol for the coin\r\n     * @returns { Observable<Object> } The data from the API request\r\n     */\r\n    getQuote(_symbol: string, _currency: string): Observable<Object> {\r\n        return this.http.get(`${this.apiBase}/api/quote/${_symbol}/${_currency}`, { headers: this.corsHeaders });\r\n    }\r\n\r\n    /**\r\n     * Get quotes for a list of symbols and currency\r\n     * @param { string[] } _symbols A list of crypto symbols for the coins\r\n     * @param { string[] } _currencies A list or currency symbols for the coins\r\n     * @returns { Observable<Map<string, Map<string, string>>> }The data from the API request\r\n     */\r\n    getQuotes(_symbols: string[], _currencies: string[]): Observable<Map<string, Map<string, string>>> {\r\n        const symbols = _symbols.join(',') || ['BTC', 'ETH'];\r\n        const currencies = _currencies.join(',') || ['USD', 'GBP'];\r\n        return this.http.get(`${this.apiBase}/api/quotes?symbols=${symbols}&currencies=${currencies}`, {\r\n            headers: this.corsHeaders\r\n        })\r\n        .pipe(map((response: Map<string, Map<string, string>>)  => response));\r\n    }\r\n\r\n    /**\r\n     * Get get daily history for a symbol and currency pair\r\n     * @param { string } _symbol The crypto symbol for the coin\r\n     * @param { string } _currency The currency symbol for the coin\r\n     * @param { number } _length the number of days\r\n     * @returns { Observable<Object> }The data from the API request\r\n     */\r\n    getDailyHistoryQuote(_symbol: string, _currency: string, _length?: number): Observable<Object> {\r\n        let queryStr = `/api/quotes/history/daily/${_symbol}/${_currency}`;\r\n        if (_length) {\r\n            queryStr += `?length=${_length}`;\r\n        }\r\n        return this.http.get(`${this.apiBase}${queryStr}`, { headers: this.corsHeaders });\r\n    }\r\n\r\n    /**\r\n     * Get a latest trading signals for a symbol\r\n     * @param { string } _symbol The crypto symbol for the coin\r\n     * @returns { Observable<Object> } The data from the API request\r\n     */\r\n    getTradingSignals(_symbol: string): Observable<Object> {\r\n        const result = this.http.get(`${this.apiBase}/api/trading/signal/${_symbol}`, { headers: this.corsHeaders });\r\n        return result\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { of } from 'rxjs';\r\nimport { catchError, exhaustMap, map, mergeMap, switchMap } from 'rxjs/operators';\r\nimport { DataService } from '../../data/data.service';\r\nimport * as QuotesActions from '../actions/quotes.actions';\r\n\r\nexport interface GetHistoryRequest { \r\n    symbol: string, \r\n    currency: string,\r\n    length: number\r\n }\r\n\r\n\r\n\r\n@Injectable()\r\nexport class QuotesEffects {\r\n    constructor(private actions$: Actions, private dataService: DataService) {}\r\n\r\n    getAllQuotes$ = createEffect(() =>\r\n        this.actions$.pipe(\r\n            ofType(QuotesActions.GET_QUOTES_API),\r\n            mergeMap(() =>\r\n                this.dataService.getAllQuotes().pipe(\r\n                    map((quotes) => ({ type: QuotesActions.UPDATE_QUOTES_API, payload: quotes })),\r\n                    catchError(() => of({ type: QuotesActions.GET_API_FAIL }))\r\n                )\r\n            )\r\n        )\r\n    );\r\n\r\n    \r\n\r\n    getDailyHistoryQuote$ = createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(QuotesActions.GET_DAILY_HISTORY_API),\r\n            mergeMap((action: GetHistoryRequest) => {\r\n                const symbol = action.symbol;\r\n                const currency = action.currency;\r\n                const length = action.length;\r\n                return this.dataService.getDailyHistoryQuote(symbol, currency, length).pipe(\r\n                    map((history) => (\r\n                        { type: QuotesActions.UPDATE_HISTORY_API, payload: history })),\r\n                    catchError(() => of({ type: QuotesActions.GET_API_FAIL }))\r\n                ); \r\n            }),  \r\n        )\r\n    });\r\n\r\n    getTradingSignals$ = createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(QuotesActions.getTradingSignals),\r\n            mergeMap( action  => {\r\n            return this.dataService.getTradingSignals(action.symbol).pipe(\r\n                map((signals) => ({ type: QuotesActions.UPDATE_TRADING_SIGNAL_API, payload: signals })),\r\n                catchError(() => of({ type: QuotesActions.GET_API_FAIL }))\r\n            ); \r\n            }),  \r\n        )\r\n    });\r\n}\r\n\r\n\r\n","import { LayoutModule } from '@angular/cdk/layout';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { LayoutComponent } from './layout/layout.component';\nimport { UiMaterialModule } from './ui-material.module';\n\n@NgModule({\n    declarations: [LayoutComponent],\n    imports: [CommonModule, LayoutModule, RouterModule, UiMaterialModule]\n})\nexport class UiModule {}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LayoutComponent } from './ui/layout/layout.component';\n\nconst routes: Routes = [\n    { path: '', pathMatch: 'full', redirectTo: 'quotes' },\n    {\n        path: '',\n        component: LayoutComponent,\n        children: [\n            {\n                path: 'quotes',\n                loadChildren: () => import('./pages/quotes/quotes.module').then((m) => m.QuotesModule)\n            },\n            {\n                path: 'info/:symbol/:currency',\n                loadChildren: () => import('./pages/info/Info.module').then((m) => m.InfoModule)\n            }\n        ]\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes, {onSameUrlNavigation: 'reload'})],\n    exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}